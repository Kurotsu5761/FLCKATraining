- hosts: cp
  tasks:
  - name: "Check file downloaded"
    stat: path=/home/kurox/LFS258_V2024-07-03_SOLUTIONS.tar.xz
    register: trainingpkg
  - name: "Download and extract training package"
    shell: |
      wget https://cm.lf.training/LFS258/LFS258_V2024-07-03_SOLUTIONS.tar.xz --user=LFtraining --password=Penguin2014
      tar -xvf LFS258_V2024-07-03_SOLUTIONS.tar.xz
    when: trainingpkg.stat.exists == False
  - name: "Update and download packages/dependencies"
    become: true
    block:
    - name: "Update and download package"
      apt:
        upgrade: yes
        update_cache: yes
    - name: "Installing dependencies"
      apt:
        name: 
        - vim
        - curl
        - apt-transport-https
        - git
        - wget
        - software-properties-common
        - lsb-release 
        - ca-certificates
        state: present
  - name: "Preparing the machine in networking"
    become: true
    block:
    - name: "Add overlay module"
      community.general.modprobe:
        name: overlay
        state: present
        persistent: present
    - name: "Add br_netfilter module"
      community.general.modprobe:
        name: br_netfilter
        state: present
        persistent: present
    # - name: "Load modules"
    #   ansible.builtin.shell: |
    #     modprobe overlay
    #     mobprobe br_netfilter
    - name: "Update kernel network"
      ansible.builtin.shell: | 
        cat << EOF | tee /etc/sysctl.d/kubernetes.conf 
        net.bridge.bridge-nf-call-ip6tables = 1
        net.bridge.bridge-nf-call-iptables = 1
        net.ipv4.ip_forward = 1
        EOF
    - name: "Check changes"
      command: sysctl --system
  - name: "Getting Docker"
    become: true
    block:
      - name: "Create directory"
        ansible.builtin.file:
          path: /etc/apt/keyrings
          state: directory
      - name: "Check if docker.gpg exist"
        stat: path=/etc/apt/keyrings/docker.gpg
        register: dockergpg
      - name: "Get apt key"
        ansible.builtin.shell: |
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        when: dockergpg.stat.exists == False
      - name: "Update apt cache"
        ansible.builtin.apt_repository:
          repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu jammy stable"
          state: present 
  - name: "Install containerd"
    become: true
    block:
      - name: "Insall containerd"
        ansible.builtin.apt:
          name: containerd.io
      - name: "Configure containerd"
        shell: |
          containerd config default | tee /etc/containerd/config.toml
          sed -e 's/SystemdCgroup = false/SystemdCgroup = true/g' -i /etc/containerd/config.toml
          systemctl restart containerd
  - name: "Getting Kubernetes Modules"
    become: true
    block:
      - name: "Check if kubernetes-apt-keyring.gpg exist"
        stat: path=/etc/apt/keyrings/kubernetes-apt-keyring.gpg
        register: k8sgpg
      - name: "Get apt key"
        ansible.builtin.shell: |
          curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        when: k8sgpg.stat.exists == False
      - name: "Update apt cache"
        ansible.builtin.apt_repository:
          repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /"
          state: present 
      - name: "Install kube related clis"
        ansible.builtin.apt:
          update_cache: true
          name: 
            - kubeadm=1.29.1-1.1
            - kubelet=1.29.1-1.1
            - kubectl=1.29.1-1.1
      # - name: hold kubeadm
      #   ansible.builtin.dpkg_selections:
      #     name: 
      #       - kubeadm
      #       - kubelet
      #       - kubectl
      #     selection: hold
  - name: "Configure Kubernetes Control Panel"
    become: true 
    block:
      - name: "Get host ip"
        ansible.builtin.shell: |
          hostname -i
        register: hostname_ip
      - name: "Display ip"
        debug:
          msg: "{{ hostname_ip.stdout }}"
      - name: "Update /etc/hosts"
        ansible.builtin.lineinfile:
          path: /etc/hosts
          line: "{{ hostname_ip.stdout }} k8scp"
          state: present
      - name: "Copy configuration file from user"
        ansible.builtin.copy:
          remote_src: true
          src: /home/kurox/LFS458/SOLUTIONS/s_03/kubeadm-config.yaml
          dest: /root/
          owner: root
      - name: ""
      - name: "Initialize kubeadm"
        ansible.builtin.shell: |
          kubeadm init --config=kubeadm-config.yaml --upload-certs | tee kubeadm-init.out
